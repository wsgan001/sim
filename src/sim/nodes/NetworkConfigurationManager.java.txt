/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package sim.nodes;

import java.io.*;
import java.util.List;

import org.apache.commons.configuration.*;

/**
 * 
 * @author yizhang
 */
public class NetworkConfigurationManager {

	public static NetworkConfiguration getNetworkConfiguration(String name) {
		NetworkConfiguration conf = new NetworkConfiguration();
		HierarchicalConfiguration config = null;
		try {
			config = new XMLConfiguration(name);
		} catch (ConfigurationException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		String dataFile = config.getString("dataFile");
		conf.timeSteps = config.getInt("timeSteps", 0);
		conf.nodeCount = config.getInt("nodeCount", 0);

		double[][] nodeDataPtrs = new double[conf.nodeCount][];

		// read clusters #
		List clusters = config.configurationsAt("clusters");
		conf.clusterCount = clusters.size();
		conf.clusters = new Cluster[conf.clusterCount];
		// read each cluster
		int i = 0;
		for (Object obj : clusters) {
			Cluster cluster = conf.clusters[i] = new Cluster();
			HierarchicalConfiguration sub = (HierarchicalConfiguration) obj;
			List nodes = sub.getList("nodes");
			cluster.nodeCount = nodes.size();
			cluster.IDTable = new int[cluster.nodeCount];
			cluster.data = new double[cluster.nodeCount][];
			// allocate space for data
			for (int j = 0; j < cluster.nodeCount; j++) {
				int id = cluster.IDTable[j] = Integer.parseInt(nodes.get(j)
						.toString());
				cluster.data[j] = new double[conf.timeSteps];
				nodeDataPtrs[id] = cluster.data[j]; // point to real location
			}

			// read model params

			conf.c = new Jama.Matrix(convertDouble(sub.getList("params.c")),
					conf.nodeCount);
			conf.a = new Jama.Matrix(convertDouble(sub.getList("params.c")),
					conf.nodeCount);
			conf.sigma = new Jama.Matrix(convertDouble(sub.getList("sigma")),
					conf.nodeCount);
			conf.a.print(0, 7);
			conf.sigma.print(0, 7);
			i++;
		}

		// read data
		int time = 0;
		String s;
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader(dataFile));
			while ((s = reader.readLine()) != null) {
				if (s.trim().length() == 0 || s.trim().startsWith("#")) {
					continue;
				}

				String[] words = s.split(" ");
				int k = 0;
				for (String w : words) {
					nodeDataPtrs[k++][time] = Double.parseDouble(w);
				}
				time++;
			}
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return conf;
	}

	private static double[] convertDouble(List list) {
		double[] d = new double[list.size()];
		for (int i = 0; i < list.size(); i++) {
			d[i] = Double.parseDouble(list.get(i).toString());
		}
		return d;
		// return t;
	}

}
